devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::install()
library(amtvanalytics)
pca_realized(iris[,1:4])
usethis::use_github()
pca_realized(iris[,1:4])
view(pca_realized(iris[,1:4]))
View(pca_realized(iris[,1:4]))
print(pca_realized(iris[,1:4]))
usethis::use_github()
#' Realiza un Análisis de Componentes Principales (PCA)
#'
#' @param datos base de datos a emplear para el proceso
#' @param escala Booleano: si TRUE, estandariza las variables
#' @param n_comp Número de componentes principales a extraer (opcional)
#' @return Una lista con tres elementos:
#'   \item{resumen}{Resumen del PCA (output de summary(prcomp()).}
#'   \item{componentes}{Matriz con las coordenadas de los datos en los nuevos ejes principales.}
#'   \item{var_exp}{Vector con la varianza explicada por cada componente.}
#' @export
pca_realized <- function(datos, escala=TRUE, n_comp=NULL){
if (!all(sapply(datos, is.numeric))) {
stop("Las variables deben ser numericas para realizar PCA")
}
componentesp <- prcomp(datos, center=TRUE, scale.=escala)
if (is.null(n_comp)){
n_comp <- min(ncol(datos), nrow(datos)-1)
} else {
n_comp <- min(n_comp, ncol(componentesp$x))
}
var_exp <- (componentesp$sdev^2) / sum(componentesp$sdev^2)
return(list(
resumen = summary(componentesp),
componentes = componentesp$x[,1:n_comp, drop = FALSE],
var_exp = var_exp[1:n_comp]
))
}
#' Calcula la contribución absoluta de las variables a los componentes principales
#'
#' @param pca_obj Objeto resultante de la función prcomp()
#' @return Una matriz con los valores de contribución de cada variable a cada componente principal
#' @export
contrib_pca <- function(pca_obj) {
cargas_cuadradas <- pca_obj$rotation^2
varianza_exp <- pca_obj$sdev^2
contrib <- sweep(cargas_cuadradas, 2, varianza_exp, "*")
return(contrib)
}
devtools::check()
contrib_pca(pca_realized(iris[,1:4]))
contrib_pca(prcomp(iris[,1:4]))
#' Obtiene las cargas factoriales del PCA
#'
#' @param pca_obj Objeto resultante de la función prcomp()
#' @return Una matriz con las cargas factoriales de cada variable en cada componente principal.
#' @export
cargas_pca <- function(pca_obj) {
return(pca_obj$rotation)
}
cargas_pca(prcomp(iris[,1:4]))
devtools::document()
rm(list = c("contrib_pca", "pca_realized"))
2+2
devtools::document()
rm(list = c("contrib_pca", "pca_realized", "cargas_pca")
devtools::document()
devtools::document()
rm(list = c("contrib_pca", "pca_realized", "cargas_pca")
2+2
rm(list = c("contrib_pca", "pca_realized", "cargas_pca"))
rm(list = c(cargas_pca"))
devtools::document()
2+2
rm(list = c(cargas_pca"))
rm(list = c("contrib_pca", "pca_realized", "cargas_pca"))
devtools::document()
rm(list = ls())
devtools::document()
2
devtools::document()
devtools::check()
tools::showNonASCIIfile("R/PCA.R")
devtools::check()
devtools::document()
devtools::check()
tools::showNonASCIIfile("R/PCA.R")
devtools::check()
devtools::document()
devtools::document()
devtools::check()
tools::showNonASCIIfile("R/PCA.R")
tools::showNonASCIIfile("R/PCA.R")
list.files("R")
tools::showNonASCIIfile("R/PCA")
tools::showNonASCIIfile("R/PCA.R")
tools::showNonASCIIfile("R/PCA.R")
devtools::install()
git --version
git --version
git --version
git --version
dplyr::cat()
cat(2)
library pandor
library(oandor)
library(pandor)
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
eda_analysis(iris)
